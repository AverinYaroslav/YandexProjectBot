import datetime

import schedule

import time
from multiprocessing.context import Process
import sqlite3

from perfectmoney import PerfectMoney
from telebot import TeleBot, types
from config import token, admin_link, db_name, information
from config import admin_id, admin_password, admin_token, admin_account, admin_chat_id

bot = TeleBot(admin_token)

withdraw_lst = []

bot = TeleBot(token)
ref_link = 'https://telegram.me/{}?start={}'

kb = types.ReplyKeyboardMarkup(True)
kb.row('üí† –ß–∞—Ç', 'üñ• –ö–∞–±–∏–Ω–µ—Ç')
kb.row('üèõ –§–æ–Ω–¥', '‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')


@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.id == admin_chat_id:
        bot.send_message(message.chat.id, '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –Ω–∞ —Å–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ /get_requests')
    user_id = int(message.chat.id)
    name = message.from_user.first_name
    second_name = message.from_user.last_name
    try:
        parent_id = int(message.text.split()[1])
    except IndexError as e:
        parent_id = 0

    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    sql = """SELECT * from users"""
    cursor.execute(sql)
    records = cursor.fetchall()
    users_ids = [row[1] for row in records]
    if parent_id in users_ids:
        if not user_id in users_ids:
            sql = """INSERT INTO users (user_id, parent_id, name, second_name, balance, gain, for_withdrawal) 
            VALUES ({user_id}, {parent_id}, '{name}', '{second_name}', 0, 0, 0)""" \
                .format(id=len(users_ids) + 1, user_id=user_id, parent_id=parent_id, name=name, second_name=second_name)
            cursor.execute(sql)
            sqlite_connection.commit()
    else:
        sql = """INSERT INTO users (user_id, parent_id, name, second_name, balance, gain, for_withdrawal) 
        VALUES ({user_id}, {parent_id}, '{name}', '{second_name}', 0, 0, 0)""" \
            .format(id=len(users_ids) + 1, user_id=user_id, parent_id=0, name=name, second_name=second_name)

        cursor.execute(sql)
        sqlite_connection.commit()
    bot.send_message(message.from_user.id, information, reply_markup=kb)


@bot.message_handler(commands=['get_requests'])
def get_requests(message):
    user_id = message.chat.id
    print(user_id)
    if user_id == admin_chat_id:
        global withdraw_lst
        sqlite_connection = sqlite3.connect(db_name)
        cursor = sqlite_connection.cursor()
        sql = """SELECT for_withdrawal, user_id FROM users"""
        data = cursor.execute(sql).fetchall()
        for_withdrawal = [float(i[0]) for i in data]
        users_ids = [i[1] for i in data]
        pm_ids = []
        s = 0

        for i in range(len(users_ids)):
            if for_withdrawal[i] == 0:
                pm_ids.append('void')
            else:
                pm_id = cursor.execute(f"""SELECT pm_id FROM pm_ids where user_id is {users_ids[i]}""").fetchall()[0][0]
                bot.send_message(message.chat.id, '–í—ã–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ññ' + str(users_ids[i])
                                       + ' –Ω–∞ —Å—É–º–º—É ' + str(for_withdrawal[i]) + '\n' + '–ï–≥–æ PerfectMoney ID ' + pm_id)
                pm_ids.append(pm_id)
                s += for_withdrawal[i]
        kb_inline = types.InlineKeyboardMarkup()
        kb_inline.row(types.InlineKeyboardButton(text='–î–∞', callback_data='confirm'),
                      types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel'))
        bot.send_message(message.chat.id, '–ò—Ç–æ–≥–æ: ' + str(s) + '\n' + '–û–ø–ª–∞—Ç–∏—Ç—å?', reply_markup=kb_inline)
        withdraw_lst = [(pm_ids[i], for_withdrawal[i]) for i in range(len(for_withdrawal)) if pm_ids[i] != 'void']


@bot.message_handler(commands=['invest'])
def choose_sum_to_fund(message):
    user_id = message.chat.id
    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    balance = cursor.execute("""SELECT balance FROM users WHERE user_id is 
                                 {user_id}"""
                             .format(user_id=user_id)).fetchall()[0][0]
    try:
        sum_to_fund = int(message.text.split()[1])
        if sum_to_fund < 0:
            raise Exception
    except Exception as e:
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
        return
    if sum_to_fund >= balance:

        kb_inline = types.InlineKeyboardMarkup()
        kb_inline.row(types.InlineKeyboardButton(text='–î–∞', callback_data='confirmed'),
                      types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel'))
        bot.send_message(user_id, '–°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∏–ª–∏ —Ä–∞–≤–Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å—É. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ '
                                  '–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞?' + '\n' +
                         '–í–µ—Ä–Ω—É—Ç—å –∏—Ö –Ω–∞ –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü', reply_markup=kb_inline)

    else:
        sql = """SELECT * from funds"""
        cursor.execute(sql)
        data = cursor.fetchall()
        sql = """INSERT INTO funds (owner_id, size, date) 
                                            VALUES ({owner_id}, {size}, '{date}')""" \
            .format(id=len(data) + 1, owner_id=user_id, size=sum_to_fund, date=datetime.datetime.now())

        cursor.execute(sql)
        sqlite_connection.commit()
        sql = """UPDATE users SET balance={balance} WHERE user_id is {user_id}""" \
            .format(balance=balance - sum_to_fund, user_id=user_id)

        cursor.execute(sql)
        sqlite_connection.commit()
        bot.send_message(user_id, '–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–∫–ª–∞–¥ –Ω–∞ ' + str(sum_to_fund))


@bot.message_handler(commands=['new_pm_id'])
def new_pm_id(message):
    user_id = message.chat.id
    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    try:
        text = message.text.split()
        pm_id = text[1]
    except Exception as e:
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id')
        return
    sql = """SELECT pm_id FROM pm_ids WHERE user_id is {user_id}""".format(user_id=user_id)
    current_pm_id = cursor.execute(sql).fetchall()
    if len(current_pm_id) == 0:
        sql = """SELECT * from pm_ids"""
        cursor.execute(sql)
        records = cursor.fetchall()
        sql = """INSERT INTO pm_ids (user_id, pm_id) 
                    VALUES ({user_id}, '{pm_id}')""" \
            .format(user_id=user_id, pm_id=pm_id)
        cursor.execute(sql)
        sqlite_connection.commit()

        bot.send_message(user_id, '–í–∞—à PerfectMoney —Å—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω')
    else:
        sql = """UPDATE pm_ids SET pm_id = '{pm_id}' where user_id is {user_id}""" \
            .format(pm_id=pm_id, user_id=user_id)
        cursor.execute(sql)
        sqlite_connection.commit()
        bot.send_message(user_id, '–í–∞—à PerfectMoney —Å—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')


@bot.message_handler(commands=['withdraw'])
def choose_sum_to_withdraw(message):
    user_id = message.chat.id
    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    try:
        sql = """SELECT pm_id FROM pm_ids WHERE user_id is 
                                         {user_id}""".format(user_id=user_id)
        pm_id = cursor.execute(sql).fetchall()[0][0]


    except Exception as e:
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ Perfect Money –∫–æ–º–∞–Ω–¥–æ–π /new_pm_id' + '\n'
                         +
                         '–ù–∞–ø—Ä–∏–º–µ—Ä, /new_pm_id U14228880')
        return
    balance = cursor.execute("""SELECT balance FROM users WHERE user_id is 
                                     {user_id}"""
                             .format(user_id=user_id)).fetchall()[0][0]
    try:
        sum_to_withdraw = float(message.text.split()[1])

        if sum_to_withdraw < 0:
            raise Exception
    except Exception as e:
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
        return
    if sum_to_withdraw >= balance:

        kb_inline = types.InlineKeyboardMarkup()
        kb_inline.row(types.InlineKeyboardButton(text='–î–∞', callback_data='confirm_withdraw'),
                      types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel'))
        bot.send_message(user_id, '–°—É–º–º–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å–Ω—è—Ç–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∏–ª–∏ —Ä–∞–≤–Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å—É. '
                                  '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ '
                                  '—Å–Ω—è—Ç—å –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞?', reply_markup=kb_inline)

    else:
        sql = """UPDATE users SET balance={balance} WHERE user_id is {user_id}""" \
            .format(balance=balance - sum_to_withdraw, user_id=user_id)
        cursor.execute(sql)
        current_withdraw = int(cursor.execute(
            """SELECT for_withdrawal FROM users WHERE user_id is {user_id}""".format(user_id=user_id)).fetchall()[0][0])
        sql = """UPDATE users SET for_withdrawal = (SELECT for_withdrawal 
        FROM users WHERE user_id is {user_id}) + {withdraw} WHERE user_id is {user_id}""".format(
            withdraw=current_withdraw + sum_to_withdraw * 0.98, user_id=user_id)
        cursor.execute(sql)
        sqlite_connection.commit()
        bot.send_message(user_id, '–ó–∞–ø—Ä–æ—à–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ ' + str(sum_to_withdraw))


@bot.message_handler(content_types=['text'])
def messages_works(message):
    if message.text == 'üñ• –ö–∞–±–∏–Ω–µ—Ç':
        cabinet(message)
    if message.text == 'üí† –ß–∞—Ç':
        chat(message)
    if message.text == 'üèõ –§–æ–Ω–¥':
        fund(message)
    if message.text == '‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        info(message)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == 'confirmed':
        user_id = call.message.chat.id
        sqlite_connection = sqlite3.connect(db_name)
        cursor = sqlite_connection.cursor()
        sql = """SELECT * from funds"""
        cursor.execute(sql)
        data = cursor.fetchall()
        balance = cursor.execute("""SELECT balance FROM users WHERE user_id is 
                                     {user_id}"""
                                 .format(user_id=user_id)).fetchall()[0][0]
        sql = """UPDATE users SET balance={balance} WHERE user_id is {user_id}""" \
            .format(balance=balance - balance, user_id=user_id)
        cursor.execute(sql)
        sqlite_connection.commit()
        sql = """INSERT INTO funds ( owner_id, size, date) 
                                                    VALUES ({owner_id}, {size}, '{date}')""" \
            .format(owner_id=user_id, size=balance, date=datetime.datetime.now())

        cursor.execute(sql)
        sqlite_connection.commit()
        bot.send_message(user_id, '–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–∫–ª–∞–¥ –Ω–∞ ' + str(balance))
    elif call.data == 'canceled':
        pass
    if call.data == 'confirm_withdraw':
        user_id = call.message.chat.id
        sqlite_connection = sqlite3.connect(db_name)
        cursor = sqlite_connection.cursor()
        balance = cursor.execute("""SELECT balance FROM users WHERE user_id is 
                                             {user_id}"""
                                 .format(user_id=user_id)).fetchall()[0][0]
        sql = """UPDATE users SET balance={balance} WHERE user_id is {user_id}""" \
            .format(balance=balance - balance, user_id=user_id)
        cursor.execute(sql)
        sqlite_connection.commit()
        current_withdraw = int(cursor.execute(
            """SELECT for_withdrawal FROM users WHERE user_id is {user_id}""".format(user_id=user_id)).fetchall()[0][0])
        sql = """UPDATE users SET for_withdrawal={withdraw} where user_id is {user_id}""".format(
            withdraw=current_withdraw + balance * 0.98, user_id=user_id)
        cursor.execute(sql)
        sqlite_connection.commit()
        bot.send_message(user_id, '–ó–∞–ø—Ä–æ—à–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ ' + str(balance))
    elif call.data == 'canceled':
        pass
    if call.data == 'deposit':
        deposit(call.message)
    if call.data == 'ref_link':
        get_my_ref(call.message)
    if call.data == 'invest':
        invest(call.message)
    if call.data == 'new_fund':
        new_fund(call.message)
    if call.data == 'withdraw':
        withdraw(call.message)
    if call.data == 'to_ballance':
        user_id = call.message.chat.id
        sqlite_connection = sqlite3.connect(db_name)
        cursor = sqlite_connection.cursor()
        data = cursor.execute("""SELECT size, date, id FROM funds WHERE owner_id is {owner_id}"""
                              .format(owner_id=user_id)).fetchall()
        dates = [datetime.datetime.strptime(i[1].split()[0], '%Y-%m-%d').date() for i in data]
        funds = [i[0] for i in data]
        ids = [i[2] for i in data]
        today = datetime.datetime.now()
        s = 0
        for i in range(len(funds)):
            if (dates[i] - today).days >= 30:
                s += int(funds[i])
                sql = """DELETE from funds WHERE id is {id}""".format(
                    id=ids[i])
                cursor.execute(sql)
                sqlite_connection.commit()
        bot.send_message(user_id, '–í—ã–≤–µ–¥–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å ' + str(s))
    if call.message.chat.id == admin_chat_id:
        global withdraw_lst
        if call.data == 'confirm':
            for i in withdraw_lst:
                pm = PerfectMoney(str(admin_account), admin_password)
                print(admin_id)
                res = pm.spend(admin_id, i[0], i[1])
                if pm.error:
                    print(pm.error)
                    bot.send_message(call.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ' + '\n' + pm.error)

                    continue
                user_id = call.message.chat.id
                sqlite_connection = sqlite3.connect(db_name)
                cursor = sqlite_connection.cursor()
                sql = f"""UPDATE users SET for_withdrawal = 0 WHERE user_id is {user_id}"""
                cursor.execute(sql)
                sqlite_connection.commit()
            withdraw_lst = []

        else:
            pass


def cabinet(message):
    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    user_id = int(message.chat.id)
    data = cursor.execute("""SELECT user_id FROM users WHERE parent_id is {parent_id}"""
                          .format(parent_id=user_id)).fetchall()

    kb_inline = types.InlineKeyboardMarkup()
    kb_inline.row(types.InlineKeyboardButton(text='üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='deposit'),
                  types.InlineKeyboardButton(text='üì§ –í—ã–≤–µ—Å—Ç–∏', callback_data='withdraw'))
    kb_inline.row(types.InlineKeyboardButton(text='‚û°Ô∏è –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='invest'))
    kb_inline.row(types.InlineKeyboardButton(text='üîó –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞', callback_data='ref_link'))
    if len(data) > 0:
        level1 = [i[0] for i in data]
        level1 = [j[0][0] + ' ' + j[0][1] for j in
                  [cursor.execute("""SELECT name, second_name FROM users WHERE user_id is {user_id}"""
                                  .format(user_id=i)).fetchall() for i in level1]]
    else:
        level1 = []
    funds = [i[0] for i in cursor.execute("""SELECT size FROM funds WHERE owner_id is {user_id}"""
                                          .format(user_id=user_id)).fetchall()]

    if len(cursor.execute("""SELECT name FROM users WHERE user_id is 
                         (SELECT parent_id FROM users WHERE user_id is {user_id})"""
                                  .format(user_id=user_id)).fetchall()) > 0:
        bot.send_message(message.from_user.id,
                         'üñ• –ö–∞–±–∏–Ω–µ—Ç' + '\n' + 'üÜî –í–∞—à ID: ' + str(user_id) + '\n' +
                         'üôé‚Äç‚ôÇÔ∏è–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å: ' +
                         cursor.execute("""SELECT name FROM users WHERE user_id is 
                             (SELECT parent_id FROM users WHERE user_id is {user_id})"""
                                        .format(user_id=user_id)).fetchall()[0][0] + '\n' +
                         'üë¨ –õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ: ' + str(len(level1)) + '\n' +
                         'üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ' + str(cursor.execute("""SELECT gain FROM users WHERE user_id is 
                                     {user_id}"""
                                                                .format(user_id=user_id)).fetchall()[0][0]) + '\n' +
                         '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ ' + str(sum(funds)) + '\n' +
                         'üíµ –ë–∞–ª–∞–Ω—Å: ' + str(cursor.execute("""SELECT balance FROM users WHERE user_id is 
                             {user_id}"""
                                                            .format(user_id=user_id)).fetchall()[0][0]),
                         reply_markup=kb_inline

                         )
    else:
        bot.send_message(message.from_user.id,
                         'üñ• –ö–∞–±–∏–Ω–µ—Ç' + '\n' + 'üÜî –í–∞—à ID: ' + str(user_id) + '\n' +
                         'üôé‚Äç‚ôÇÔ∏è–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å: ' +
                         '–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç' + '\n' +
                         'üë¨ –õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ: ' + str(len(level1)) + '\n' +
                         'üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ' + str(cursor.execute("""SELECT gain FROM users WHERE user_id is 
                                     {user_id}"""
                                                                .format(user_id=user_id)).fetchall()[0][0]) + '\n' +
                         '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ' + str(sum(funds)) + '\n' +
                         'üíµ –ë–∞–ª–∞–Ω—Å: ' + str(cursor.execute("""SELECT balance FROM users WHERE user_id is 
                                     {user_id}"""
                                                            .format(user_id=user_id)).fetchall()[0][0]),
                         reply_markup=kb_inline
                         )


def chat(message):
    bot.send_message(message.from_user.id, '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:' + '\n' + 'Admin: ' + admin_link)


def fund(message):
    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    bot.send_message(message.from_user.id, 'üìà –£–∂–µ '
                     + str(sum([i[0] for i in cursor.execute("""SELECT gain FROM users""").fetchall()]))
                     + ' —Ä—É–±–ª–µ–π –±—ã–ª–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞')


def info(message):
    bot.send_message(message.from_user.id, information)


def invest(message):
    user_id = message.chat.id
    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    data = cursor.execute("""SELECT size, date FROM funds WHERE owner_id is {owner_id}"""
                          .format(owner_id=user_id)).fetchall()

    if len(data) == 0:
        kb_inline = types.InlineKeyboardMarkup()
        kb_inline.row(types.InlineKeyboardButton(text='üì• –°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥', callback_data='new_fund'))
        bot.send_message(user_id, '–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –≤–∫–ª–∞–¥–æ–≤', reply_markup=kb_inline)
    else:

        kb_inline = types.InlineKeyboardMarkup()
        kb_inline.row(types.InlineKeyboardButton(text='üì• –°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥', callback_data='new_fund'))
        bot.send_message(user_id, '–¢–µ–∫—É—â–∏–µ –≤–∫–ª–∞–¥—ã: ', reply_markup=kb_inline)

        dates = [datetime.datetime.strptime(i[1].split()[0], '%Y-%m-%d').date() for i in data]
        funds = [i[0] for i in data]
        today = datetime.datetime.now()
        s = 0
        for i in range(len(funds)):
            delta = today.day + today.month * 30 + today.year * 365 - \
                    dates[i].day - dates[i].month * 30 - dates[i].year * 365
            if delta >= 30:
                s += int(funds[i])
        if s:
            kb_inline2 = types.InlineKeyboardMarkup()
            kb_inline2.row(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å', callback_data='to_balance'))
            bot.send_message(user_id, '–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å ' + str(s), reply_markup=kb_inline2)


def new_fund(message):
    user_id = message.chat.id
    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    balance = cursor.execute("""SELECT balance FROM users WHERE user_id is 
                             {user_id}"""
                             .format(user_id=user_id)).fetchall()[0][0]
    bot.send_message(user_id, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /invest –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å' + '\n' +
                     '–ù–∞–ø—Ä–∏–º–µ—Ä, /invest 50' + '\n'
                                              'üíµ –ë–∞–ª–∞–Ω—Å: ' + str(balance))


def get_my_ref(message):
    bot_name = bot.get_me().username
    user_id = int(message.chat.id)
    bot.send_message(user_id, '–í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞: ' + ref_link.format(bot_name, message.chat.id))
    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    data = cursor.execute("""SELECT user_id FROM users WHERE parent_id is {parent_id}"""
                          .format(parent_id=user_id)).fetchall()

    if len(data) > 0:
        level1 = [i[0] for i in data]
    else:
        bot.send_message(user_id, '–ü–∞—Ä—Ç–Ω—ë—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
        return
    level2 = list()
    level3 = list()
    level4 = list()
    level5 = list()
    for i2 in level1:
        data = cursor.execute("""SELECT user_id FROM users WHERE parent_id is {parent_id}"""
                              .format(parent_id=i2)).fetchall()
        if len(data) > 0:
            level2 += [i[0] for i in data]
        for i3 in level2:
            data = cursor.execute("""SELECT user_id FROM users WHERE parent_id is {parent_id}"""
                                  .format(parent_id=i3)).fetchall()
            if len(data) > 0:
                level3 += [i[0] for i in data]
            for i4 in level3:
                data = cursor.execute("""SELECT user_id FROM users WHERE parent_id is {parent_id}"""
                                      .format(parent_id=i4)).fetchall()
                if len(data) > 0:
                    level4 += [i[0] for i in data]
                for i5 in level5:
                    data = cursor.execute("""SELECT user_id FROM users WHERE parent_id is {parent_id}"""
                                          .format(parent_id=i5)).fetchall()
                    if len(data) > 0:
                        level5 += [i[0] for i in data]
    level1 = [j[0][0] + ' ' + j[0][1] for j in
              [cursor.execute("""SELECT name, second_name FROM users WHERE user_id is {user_id}"""
                              .format(user_id=i)).fetchall() for i in level1]]
    level2 = [j[0][0] + ' ' + j[0][1] for j in
              [cursor.execute("""SELECT name, second_name FROM users WHERE user_id is {user_id}"""
                              .format(user_id=i)).fetchall() for i in level2]]
    level3 = [j[0][0] + ' ' + j[0][1] for j in
              [cursor.execute("""SELECT name, second_name FROM users WHERE user_id is {user_id}"""
                              .format(user_id=i)).fetchall() for i in level3]]
    level4 = [j[0][0] + ' ' + j[0][1] for j in
              [cursor.execute("""SELECT name, second_name FROM users WHERE user_id is {user_id}"""
                              .format(user_id=i)).fetchall() for i in level4]]
    level5 = [j[0][0] + ' ' + j[0][1] for j in
              [cursor.execute("""SELECT name, second_name FROM users WHERE user_id is {user_id}"""
                              .format(user_id=i)).fetchall() for i in level5]]
    bot.send_message(user_id, '–í–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã:' + '\n' +
                     '–£—Ä–æ–≤–µ–Ω—å 1 - ' + ', '.join(level1) + '\n' +
                     '–£—Ä–æ–≤–µ–Ω—å 2 - ' + ', '.join(level2) + '\n' +
                     '–£—Ä–æ–≤–µ–Ω—å 3 - ' + ', '.join(level3) + '\n' +
                     '–£—Ä–æ–≤–µ–Ω—å 4 - ' + ', '.join(level4) + '\n' +
                     '–£—Ä–æ–≤–µ–Ω—å 5 - ' + ', '.join(level5))


def withdraw(message):
    user_id = message.chat.id

    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    balance = cursor.execute("""SELECT balance FROM users WHERE user_id is 
                                 {user_id}"""
                             .format(user_id=user_id)).fetchall()[0][0]
    bot.send_message(user_id, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /withdraw –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å' + '\n' +
                     '–ù–∞–ø—Ä–∏–º–µ—Ä, /withdraw 50' + '\n'
                                                'üíµ –ë–∞–ª–∞–Ω—Å: ' + str(balance) + '\n' + '–ö–æ–º–∏—Å—Å–∏—è 2%')


def update_balances():
    import holidays
    holidays = holidays.Russia()
    today = datetime.datetime.now()
    if today.strftime('%Y-%m-%d') in holidays or today.weekday() >= 5:
        return
    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    sql = """SELECT * from users"""
    cursor.execute(sql)
    records = cursor.fetchall()
    users_ids = [row[1] for row in records]
    users_balances = [row[5] for row in records]
    users_gains = [row[6] for row in records]
    for i in range(len(users_ids)):
        funds = [j[0] for j in cursor.execute("""SELECT size FROM funds WHERE owner_id is {user_id}"""
                                              .format(user_id=users_ids[i])).fetchall()]
        sql = """UPDATE users SET balance={balance} WHERE user_id is {user_id}""" \
            .format(balance=round(users_balances[i] + sum(funds) * 0.01, 4), user_id=users_ids[i])
        cursor.execute(sql)
        sqlite_connection.commit()
        sql = """UPDATE users SET gain={gain} WHERE user_id is {user_id}""" \
            .format(gain=round(users_gains[i] + sum(funds) * 0.01, 4), user_id=users_ids[i])
        cursor.execute(sql)
        sqlite_connection.commit()



def check():
    from history import history
    from config import start_month, start_day, start_year,\
        end_month, end_day, end_year
    sqlite_connection = sqlite3.connect(db_name)
    cursor = sqlite_connection.cursor()
    login = str(admin_account)
    password = admin_password
    pm = PerfectMoney(login, password)
    data = pm.history(start_month, start_day, start_year, end_month, end_day, end_year)
    if pm.error:
        print(pm.error)
        return
    res = []
    for i in [j for j in data]:
        try:
            memo = i['Memo'].split(': ')[1]
            user_id = cursor.execute("""SELECT user_id FROM users WHERE user_id is {user_id}"""
                                     .format(user_id=memo)).fetchall()[0][0]
            amount = float(i['Amount'])
            amount = int(amount)
            res.append([user_id, amount])
        except:
            continue

    print(res)
    f = open('history.py', 'w')
    if len(res) > 0:
        f.write('history = [[' + '], ['.join([', '.join([f'{i[0]}', f"{i[1]}"]) for i in res]) + ']]')
    else:
        f.write('history = []')
    f.close()
    for i in [j for j in res[len(history):]]:
        try:
            user_id = i[0]
            amount = i[1]


        except:
            continue

        data = cursor.execute(
            f"""SELECT parent_id FROM users WHERE user_id is {user_id}""").fetchall()
        if len(data) > 0:
            level1 = data[0][0]
            sql = f"""UPDATE users SET balance = (SELECT balance FROM users 
                WHERE user_id is {level1}) + {amount * 0.05} WHERE user_id is {level1}"""
            cursor.execute(sql)
            sqlite_connection.commit()
            data = cursor.execute(
                f"""SELECT parent_id FROM users WHERE user_id is {level1}""").fetchall()
            if len(data) > 0:
                level2 = data[0][0]
                sql = f"""UPDATE users SET balance = (SELECT balance FROM users 
                            WHERE user_id is {level2}) + {amount * 0.04} WHERE user_id is {level2}"""
                cursor.execute(sql)
                sqlite_connection.commit()
                data = cursor.execute(
                    f"""SELECT parent_id FROM users WHERE user_id is {level2}""").fetchall()
                if len(data) > 0:
                    level3 = data[0][0]
                    sql = f"""UPDATE users SET balance = (SELECT balance FROM users 
                                            WHERE user_id is {level3}) + {amount * 0.03} WHERE user_id is {level3}"""
                    cursor.execute(sql)
                    sqlite_connection.commit()
                    data = cursor.execute(
                        f"""SELECT parent_id FROM users WHERE user_id is {level3}""").fetchall()
                    if len(data) > 0:
                        level4 = data[0][0]
                        sql = f"""UPDATE users SET balance = (SELECT balance FROM users 
                                                WHERE user_id is {level4}) + {amount * 0.02} WHERE user_id is {level4}"""
                        cursor.execute(sql)
                        sqlite_connection.commit()
                        data = cursor.execute(
                            f"""SELECT parent_id FROM users WHERE user_id is {level4}""").fetchall()
                        if len(data) > 0:
                            level5 = data[0][0]
                            sql = f"""UPDATE users SET balance = (SELECT balance FROM users 
                                                    WHERE user_id is {level5}) + {amount * 0.01} WHERE user_id is {level5}"""
                            cursor.execute(sql)
                            sqlite_connection.commit()
        sql = f"""UPDATE users SET balance = (SELECT balance FROM users 
                                                WHERE user_id is {user_id}) + {amount} WHERE user_id is {user_id}"""
        cursor.execute(sql)
        sqlite_connection.commit()


schedule.every().day.at('00:00').do(lambda: update_balances())
schedule.every(10).minutes.do(check)


def deposit(message):
    user_id = message.chat.id
    bot.send_message(user_id, 'üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞' + '\n' +

                     '‚ñ´ –°–ø–æ—Å–æ–±: Perfect Money' + '\n' +

                     'üëâ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:' + '\n' +
                     '‚ñ´ –ö–æ—à–µ–ª—ë–∫: ' + admin_id + '\n' +
                     '‚ñ´ –û–ø–∏—Å–∞–Ω–∏–µ: ' + str(message.chat.id) + ''
                     + '\n' +
                     '‚ùó –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–µ—Ä–µ–≤–æ–¥—É, –∏–Ω–∞—á–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø—Ä–∏–¥—É—Ç. '
                     '–ó–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–æ –∑–∞–ø—è—Ç–æ–π')


class ScheduleMessage():
    def try_send_schedule(self):
        while True:
            schedule.run_pending()
            time.sleep(1)

    def start_process(self):
        p1 = Process(target=ScheduleMessage.try_send_schedule, args=(self,))
        p1.start()


if __name__ == '__main__':
    check()
    c = ScheduleMessage()
    c.start_process()
    bot.polling(none_stop=True)
